// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var KartKraft = KartKraft || {};

/**
 * State of vehicle
 *
 * @enum {number}
 */
KartKraft.VehicleState = {
  Idle: 0,
  Pits: 1,
  PitGrid: 2,
  Outlap: 3,
  RollingStart: 4,
  FlyingStart: 5,
  StartGrid: 6,
  Racing: 7,
  Retired: 8,
  Finished: 9
};

/**
 * State of vehicle
 *
 * @enum {string}
 */
KartKraft.VehicleStateName = {
  '0': 'Idle',
  '1': 'Pits',
  '2': 'PitGrid',
  '3': 'Outlap',
  '4': 'RollingStart',
  '5': 'FlyingStart',
  '6': 'StartGrid',
  '7': 'Racing',
  '8': 'Retired',
  '9': 'Finished'
};

/**
 * @enum {number}
 */
KartKraft.Surface = {
  None: 0,
  Asphalt: 1,
  Grass: 2,
  Gravel: 3,
  Kerb: 4,
  Sand: 5,
  Tyre: 6
};

/**
 * @enum {string}
 */
KartKraft.SurfaceName = {
  '0': 'None',
  '1': 'Asphalt',
  '2': 'Grass',
  '3': 'Gravel',
  '4': 'Kerb',
  '5': 'Sand',
  '6': 'Tyre'
};

/**
 * Useful generic color struct 
 *
 * @constructor
 */
KartKraft.Color = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {KartKraft.Color}
 */
KartKraft.Color.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
KartKraft.Color.prototype.r = function() {
  return this.bb.readInt8(this.bb_pos);
};

/**
 * @returns {number}
 */
KartKraft.Color.prototype.g = function() {
  return this.bb.readInt8(this.bb_pos + 1);
};

/**
 * @returns {number}
 */
KartKraft.Color.prototype.b = function() {
  return this.bb.readInt8(this.bb_pos + 2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @returns {flatbuffers.Offset}
 */
KartKraft.Color.createColor = function(builder, r, g, b) {
  builder.prep(1, 3);
  builder.writeInt8(b);
  builder.writeInt8(g);
  builder.writeInt8(r);
  return builder.offset();
};

/**
 * @constructor
 */
KartKraft.Wheel = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {KartKraft.Wheel}
 */
KartKraft.Wheel.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.Wheel=} obj
 * @returns {KartKraft.Wheel}
 */
KartKraft.Wheel.getRootAsWheel = function(bb, obj) {
  return (obj || new KartKraft.Wheel).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.Wheel=} obj
 * @returns {KartKraft.Wheel}
 */
KartKraft.Wheel.getSizePrefixedRootAsWheel = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new KartKraft.Wheel).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {KartKraft.Surface}
 */
KartKraft.Wheel.prototype.surface = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {KartKraft.Surface} */ (this.bb.readUint8(this.bb_pos + offset)) : KartKraft.Surface.None;
};

/**
 * @returns {number}
 */
KartKraft.Wheel.prototype.slipAngle = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
KartKraft.Wheel.startWheel = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {KartKraft.Surface} surface
 */
KartKraft.Wheel.addSurface = function(builder, surface) {
  builder.addFieldInt8(0, surface, KartKraft.Surface.None);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} slipAngle
 */
KartKraft.Wheel.addSlipAngle = function(builder, slipAngle) {
  builder.addFieldFloat32(1, slipAngle, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
KartKraft.Wheel.endWheel = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {KartKraft.Surface} surface
 * @param {number} slipAngle
 * @returns {flatbuffers.Offset}
 */
KartKraft.Wheel.createWheel = function(builder, surface, slipAngle) {
  KartKraft.Wheel.startWheel(builder);
  KartKraft.Wheel.addSurface(builder, surface);
  KartKraft.Wheel.addSlipAngle(builder, slipAngle);
  return KartKraft.Wheel.endWheel(builder);
}

/**
 * Motion data of local player for driving hardware motion simulators
 *
 * @constructor
 */
KartKraft.Motion = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {KartKraft.Motion}
 */
KartKraft.Motion.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.Motion=} obj
 * @returns {KartKraft.Motion}
 */
KartKraft.Motion.getRootAsMotion = function(bb, obj) {
  return (obj || new KartKraft.Motion).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.Motion=} obj
 * @returns {KartKraft.Motion}
 */
KartKraft.Motion.getSizePrefixedRootAsMotion = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new KartKraft.Motion).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.pitch = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.roll = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.yaw = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.accelerationX = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.accelerationY = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.accelerationZ = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.tractionLoss = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.velocityX = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.velocityY = function() {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.velocityZ = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.angularVelocityX = function() {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.angularVelocityY = function() {
  var offset = this.bb.__offset(this.bb_pos, 26);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.angularVelocityZ = function() {
  var offset = this.bb.__offset(this.bb_pos, 28);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {number} index
 * @param {KartKraft.Wheel=} obj
 * @returns {KartKraft.Wheel}
 */
KartKraft.Motion.prototype.wheels = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 30);
  return offset ? (obj || new KartKraft.Wheel).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.wheelsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 30);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.worldVelocityX = function() {
  var offset = this.bb.__offset(this.bb_pos, 32);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.worldVelocityY = function() {
  var offset = this.bb.__offset(this.bb_pos, 34);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.worldVelocityZ = function() {
  var offset = this.bb.__offset(this.bb_pos, 36);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.worldPositionX = function() {
  var offset = this.bb.__offset(this.bb_pos, 38);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.worldPositionY = function() {
  var offset = this.bb.__offset(this.bb_pos, 40);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.worldPositionZ = function() {
  var offset = this.bb.__offset(this.bb_pos, 42);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
KartKraft.Motion.startMotion = function(builder) {
  builder.startObject(20);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} pitch
 */
KartKraft.Motion.addPitch = function(builder, pitch) {
  builder.addFieldFloat32(0, pitch, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} roll
 */
KartKraft.Motion.addRoll = function(builder, roll) {
  builder.addFieldFloat32(1, roll, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} yaw
 */
KartKraft.Motion.addYaw = function(builder, yaw) {
  builder.addFieldFloat32(2, yaw, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} accelerationX
 */
KartKraft.Motion.addAccelerationX = function(builder, accelerationX) {
  builder.addFieldFloat32(3, accelerationX, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} accelerationY
 */
KartKraft.Motion.addAccelerationY = function(builder, accelerationY) {
  builder.addFieldFloat32(4, accelerationY, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} accelerationZ
 */
KartKraft.Motion.addAccelerationZ = function(builder, accelerationZ) {
  builder.addFieldFloat32(5, accelerationZ, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} tractionLoss
 */
KartKraft.Motion.addTractionLoss = function(builder, tractionLoss) {
  builder.addFieldFloat32(6, tractionLoss, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} velocityX
 */
KartKraft.Motion.addVelocityX = function(builder, velocityX) {
  builder.addFieldFloat32(7, velocityX, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} velocityY
 */
KartKraft.Motion.addVelocityY = function(builder, velocityY) {
  builder.addFieldFloat32(8, velocityY, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} velocityZ
 */
KartKraft.Motion.addVelocityZ = function(builder, velocityZ) {
  builder.addFieldFloat32(9, velocityZ, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} angularVelocityX
 */
KartKraft.Motion.addAngularVelocityX = function(builder, angularVelocityX) {
  builder.addFieldFloat32(10, angularVelocityX, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} angularVelocityY
 */
KartKraft.Motion.addAngularVelocityY = function(builder, angularVelocityY) {
  builder.addFieldFloat32(11, angularVelocityY, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} angularVelocityZ
 */
KartKraft.Motion.addAngularVelocityZ = function(builder, angularVelocityZ) {
  builder.addFieldFloat32(12, angularVelocityZ, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} wheelsOffset
 */
KartKraft.Motion.addWheels = function(builder, wheelsOffset) {
  builder.addFieldOffset(13, wheelsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
KartKraft.Motion.createWheelsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
KartKraft.Motion.startWheelsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} worldVelocityX
 */
KartKraft.Motion.addWorldVelocityX = function(builder, worldVelocityX) {
  builder.addFieldFloat32(14, worldVelocityX, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} worldVelocityY
 */
KartKraft.Motion.addWorldVelocityY = function(builder, worldVelocityY) {
  builder.addFieldFloat32(15, worldVelocityY, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} worldVelocityZ
 */
KartKraft.Motion.addWorldVelocityZ = function(builder, worldVelocityZ) {
  builder.addFieldFloat32(16, worldVelocityZ, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} worldPositionX
 */
KartKraft.Motion.addWorldPositionX = function(builder, worldPositionX) {
  builder.addFieldFloat32(17, worldPositionX, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} worldPositionY
 */
KartKraft.Motion.addWorldPositionY = function(builder, worldPositionY) {
  builder.addFieldFloat32(18, worldPositionY, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} worldPositionZ
 */
KartKraft.Motion.addWorldPositionZ = function(builder, worldPositionZ) {
  builder.addFieldFloat32(19, worldPositionZ, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
KartKraft.Motion.endMotion = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} pitch
 * @param {number} roll
 * @param {number} yaw
 * @param {number} accelerationX
 * @param {number} accelerationY
 * @param {number} accelerationZ
 * @param {number} tractionLoss
 * @param {number} velocityX
 * @param {number} velocityY
 * @param {number} velocityZ
 * @param {number} angularVelocityX
 * @param {number} angularVelocityY
 * @param {number} angularVelocityZ
 * @param {flatbuffers.Offset} wheelsOffset
 * @param {number} worldVelocityX
 * @param {number} worldVelocityY
 * @param {number} worldVelocityZ
 * @param {number} worldPositionX
 * @param {number} worldPositionY
 * @param {number} worldPositionZ
 * @returns {flatbuffers.Offset}
 */
KartKraft.Motion.createMotion = function(builder, pitch, roll, yaw, accelerationX, accelerationY, accelerationZ, tractionLoss, velocityX, velocityY, velocityZ, angularVelocityX, angularVelocityY, angularVelocityZ, wheelsOffset, worldVelocityX, worldVelocityY, worldVelocityZ, worldPositionX, worldPositionY, worldPositionZ) {
  KartKraft.Motion.startMotion(builder);
  KartKraft.Motion.addPitch(builder, pitch);
  KartKraft.Motion.addRoll(builder, roll);
  KartKraft.Motion.addYaw(builder, yaw);
  KartKraft.Motion.addAccelerationX(builder, accelerationX);
  KartKraft.Motion.addAccelerationY(builder, accelerationY);
  KartKraft.Motion.addAccelerationZ(builder, accelerationZ);
  KartKraft.Motion.addTractionLoss(builder, tractionLoss);
  KartKraft.Motion.addVelocityX(builder, velocityX);
  KartKraft.Motion.addVelocityY(builder, velocityY);
  KartKraft.Motion.addVelocityZ(builder, velocityZ);
  KartKraft.Motion.addAngularVelocityX(builder, angularVelocityX);
  KartKraft.Motion.addAngularVelocityY(builder, angularVelocityY);
  KartKraft.Motion.addAngularVelocityZ(builder, angularVelocityZ);
  KartKraft.Motion.addWheels(builder, wheelsOffset);
  KartKraft.Motion.addWorldVelocityX(builder, worldVelocityX);
  KartKraft.Motion.addWorldVelocityY(builder, worldVelocityY);
  KartKraft.Motion.addWorldVelocityZ(builder, worldVelocityZ);
  KartKraft.Motion.addWorldPositionX(builder, worldPositionX);
  KartKraft.Motion.addWorldPositionY(builder, worldPositionY);
  KartKraft.Motion.addWorldPositionZ(builder, worldPositionZ);
  return KartKraft.Motion.endMotion(builder);
}

/**
 * Dash data for displaying state of current local/followed player
 *
 * @constructor
 */
KartKraft.Dashboard = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {KartKraft.Dashboard}
 */
KartKraft.Dashboard.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.Dashboard=} obj
 * @returns {KartKraft.Dashboard}
 */
KartKraft.Dashboard.getRootAsDashboard = function(bb, obj) {
  return (obj || new KartKraft.Dashboard).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.Dashboard=} obj
 * @returns {KartKraft.Dashboard}
 */
KartKraft.Dashboard.getSizePrefixedRootAsDashboard = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new KartKraft.Dashboard).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.speed = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.rpm = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.steer = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.throttle = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.brake = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.gear = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.pos = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.bestLap = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.currentLap = function() {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.lastLap = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.lapCount = function() {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.sectorCount = function() {
  var offset = this.bb.__offset(this.bb_pos, 26);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
KartKraft.Dashboard.startDashboard = function(builder) {
  builder.startObject(12);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} speed
 */
KartKraft.Dashboard.addSpeed = function(builder, speed) {
  builder.addFieldFloat32(0, speed, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} rpm
 */
KartKraft.Dashboard.addRpm = function(builder, rpm) {
  builder.addFieldFloat32(1, rpm, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} steer
 */
KartKraft.Dashboard.addSteer = function(builder, steer) {
  builder.addFieldFloat32(2, steer, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} throttle
 */
KartKraft.Dashboard.addThrottle = function(builder, throttle) {
  builder.addFieldFloat32(3, throttle, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} brake
 */
KartKraft.Dashboard.addBrake = function(builder, brake) {
  builder.addFieldFloat32(4, brake, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} gear
 */
KartKraft.Dashboard.addGear = function(builder, gear) {
  builder.addFieldInt8(5, gear, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} pos
 */
KartKraft.Dashboard.addPos = function(builder, pos) {
  builder.addFieldInt8(6, pos, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} bestLap
 */
KartKraft.Dashboard.addBestLap = function(builder, bestLap) {
  builder.addFieldFloat32(7, bestLap, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} currentLap
 */
KartKraft.Dashboard.addCurrentLap = function(builder, currentLap) {
  builder.addFieldFloat32(8, currentLap, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} lastLap
 */
KartKraft.Dashboard.addLastLap = function(builder, lastLap) {
  builder.addFieldFloat32(9, lastLap, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} lapCount
 */
KartKraft.Dashboard.addLapCount = function(builder, lapCount) {
  builder.addFieldInt16(10, lapCount, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} sectorCount
 */
KartKraft.Dashboard.addSectorCount = function(builder, sectorCount) {
  builder.addFieldInt16(11, sectorCount, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
KartKraft.Dashboard.endDashboard = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} speed
 * @param {number} rpm
 * @param {number} steer
 * @param {number} throttle
 * @param {number} brake
 * @param {number} gear
 * @param {number} pos
 * @param {number} bestLap
 * @param {number} currentLap
 * @param {number} lastLap
 * @param {number} lapCount
 * @param {number} sectorCount
 * @returns {flatbuffers.Offset}
 */
KartKraft.Dashboard.createDashboard = function(builder, speed, rpm, steer, throttle, brake, gear, pos, bestLap, currentLap, lastLap, lapCount, sectorCount) {
  KartKraft.Dashboard.startDashboard(builder);
  KartKraft.Dashboard.addSpeed(builder, speed);
  KartKraft.Dashboard.addRpm(builder, rpm);
  KartKraft.Dashboard.addSteer(builder, steer);
  KartKraft.Dashboard.addThrottle(builder, throttle);
  KartKraft.Dashboard.addBrake(builder, brake);
  KartKraft.Dashboard.addGear(builder, gear);
  KartKraft.Dashboard.addPos(builder, pos);
  KartKraft.Dashboard.addBestLap(builder, bestLap);
  KartKraft.Dashboard.addCurrentLap(builder, currentLap);
  KartKraft.Dashboard.addLastLap(builder, lastLap);
  KartKraft.Dashboard.addLapCount(builder, lapCount);
  KartKraft.Dashboard.addSectorCount(builder, sectorCount);
  return KartKraft.Dashboard.endDashboard(builder);
}

/**
 * Basic vehicle data for live timing. e.g. trackmap
 *
 * @constructor
 */
KartKraft.Vehicle = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {KartKraft.Vehicle}
 */
KartKraft.Vehicle.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.Vehicle=} obj
 * @returns {KartKraft.Vehicle}
 */
KartKraft.Vehicle.getRootAsVehicle = function(bb, obj) {
  return (obj || new KartKraft.Vehicle).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.Vehicle=} obj
 * @returns {KartKraft.Vehicle}
 */
KartKraft.Vehicle.getSizePrefixedRootAsVehicle = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new KartKraft.Vehicle).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {KartKraft.VehicleState}
 */
KartKraft.Vehicle.prototype.state = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {KartKraft.VehicleState} */ (this.bb.readUint8(this.bb_pos + offset)) : KartKraft.VehicleState.Idle;
};

/**
 * @returns {number}
 */
KartKraft.Vehicle.prototype.posX = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Vehicle.prototype.posY = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Vehicle.prototype.posZ = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Vehicle.prototype.yaw = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Vehicle.prototype.sessionPos = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {KartKraft.Color=} obj
 * @returns {KartKraft.Color|null}
 */
KartKraft.Vehicle.prototype.color = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? (obj || new KartKraft.Color).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @returns {number}
 */
KartKraft.Vehicle.prototype.normalisedTrackPos = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
KartKraft.Vehicle.startVehicle = function(builder) {
  builder.startObject(8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {KartKraft.VehicleState} state
 */
KartKraft.Vehicle.addState = function(builder, state) {
  builder.addFieldInt8(0, state, KartKraft.VehicleState.Idle);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} posX
 */
KartKraft.Vehicle.addPosX = function(builder, posX) {
  builder.addFieldFloat32(1, posX, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} posY
 */
KartKraft.Vehicle.addPosY = function(builder, posY) {
  builder.addFieldFloat32(2, posY, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} posZ
 */
KartKraft.Vehicle.addPosZ = function(builder, posZ) {
  builder.addFieldFloat32(3, posZ, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} yaw
 */
KartKraft.Vehicle.addYaw = function(builder, yaw) {
  builder.addFieldFloat32(4, yaw, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} sessionPos
 */
KartKraft.Vehicle.addSessionPos = function(builder, sessionPos) {
  builder.addFieldInt32(5, sessionPos, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} colorOffset
 */
KartKraft.Vehicle.addColor = function(builder, colorOffset) {
  builder.addFieldStruct(6, colorOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} normalisedTrackPos
 */
KartKraft.Vehicle.addNormalisedTrackPos = function(builder, normalisedTrackPos) {
  builder.addFieldFloat32(7, normalisedTrackPos, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
KartKraft.Vehicle.endVehicle = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {KartKraft.VehicleState} state
 * @param {number} posX
 * @param {number} posY
 * @param {number} posZ
 * @param {number} yaw
 * @param {number} sessionPos
 * @param {flatbuffers.Offset} colorOffset
 * @param {number} normalisedTrackPos
 * @returns {flatbuffers.Offset}
 */
KartKraft.Vehicle.createVehicle = function(builder, state, posX, posY, posZ, yaw, sessionPos, colorOffset, normalisedTrackPos) {
  KartKraft.Vehicle.startVehicle(builder);
  KartKraft.Vehicle.addState(builder, state);
  KartKraft.Vehicle.addPosX(builder, posX);
  KartKraft.Vehicle.addPosY(builder, posY);
  KartKraft.Vehicle.addPosZ(builder, posZ);
  KartKraft.Vehicle.addYaw(builder, yaw);
  KartKraft.Vehicle.addSessionPos(builder, sessionPos);
  KartKraft.Vehicle.addColor(builder, colorOffset);
  KartKraft.Vehicle.addNormalisedTrackPos(builder, normalisedTrackPos);
  return KartKraft.Vehicle.endVehicle(builder);
}

/**
 * Session data
 *
 * @constructor
 */
KartKraft.Session = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {KartKraft.Session}
 */
KartKraft.Session.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.Session=} obj
 * @returns {KartKraft.Session}
 */
KartKraft.Session.getRootAsSession = function(bb, obj) {
  return (obj || new KartKraft.Session).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.Session=} obj
 * @returns {KartKraft.Session}
 */
KartKraft.Session.getSizePrefixedRootAsSession = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new KartKraft.Session).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {KartKraft.Vehicle=} obj
 * @returns {KartKraft.Vehicle}
 */
KartKraft.Session.prototype.vehicles = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new KartKraft.Vehicle).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
KartKraft.Session.prototype.vehiclesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
KartKraft.Session.prototype.timeElapsed = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
KartKraft.Session.startSession = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} vehiclesOffset
 */
KartKraft.Session.addVehicles = function(builder, vehiclesOffset) {
  builder.addFieldOffset(3, vehiclesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
KartKraft.Session.createVehiclesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
KartKraft.Session.startVehiclesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} timeElapsed
 */
KartKraft.Session.addTimeElapsed = function(builder, timeElapsed) {
  builder.addFieldFloat32(4, timeElapsed, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
KartKraft.Session.endSession = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} vehiclesOffset
 * @param {number} timeElapsed
 * @returns {flatbuffers.Offset}
 */
KartKraft.Session.createSession = function(builder, vehiclesOffset, timeElapsed) {
  KartKraft.Session.startSession(builder);
  KartKraft.Session.addVehicles(builder, vehiclesOffset);
  KartKraft.Session.addTimeElapsed(builder, timeElapsed);
  return KartKraft.Session.endSession(builder);
}

/**
 * Data associated with a vehicle which doesn't change dynamically during a race. e.g. class, num gears, driver name etc
 *
 * @constructor
 */
KartKraft.VehicleConfig = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {KartKraft.VehicleConfig}
 */
KartKraft.VehicleConfig.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.VehicleConfig=} obj
 * @returns {KartKraft.VehicleConfig}
 */
KartKraft.VehicleConfig.getRootAsVehicleConfig = function(bb, obj) {
  return (obj || new KartKraft.VehicleConfig).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.VehicleConfig=} obj
 * @returns {KartKraft.VehicleConfig}
 */
KartKraft.VehicleConfig.getSizePrefixedRootAsVehicleConfig = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new KartKraft.VehicleConfig).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
KartKraft.VehicleConfig.prototype.rpmLimit = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.VehicleConfig.prototype.rpmMax = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.VehicleConfig.prototype.gearMax = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
KartKraft.VehicleConfig.startVehicleConfig = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} rpmLimit
 */
KartKraft.VehicleConfig.addRpmLimit = function(builder, rpmLimit) {
  builder.addFieldFloat32(0, rpmLimit, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} rpmMax
 */
KartKraft.VehicleConfig.addRpmMax = function(builder, rpmMax) {
  builder.addFieldFloat32(1, rpmMax, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} gearMax
 */
KartKraft.VehicleConfig.addGearMax = function(builder, gearMax) {
  builder.addFieldInt8(2, gearMax, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
KartKraft.VehicleConfig.endVehicleConfig = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} rpmLimit
 * @param {number} rpmMax
 * @param {number} gearMax
 * @returns {flatbuffers.Offset}
 */
KartKraft.VehicleConfig.createVehicleConfig = function(builder, rpmLimit, rpmMax, gearMax) {
  KartKraft.VehicleConfig.startVehicleConfig(builder);
  KartKraft.VehicleConfig.addRpmLimit(builder, rpmLimit);
  KartKraft.VehicleConfig.addRpmMax(builder, rpmMax);
  KartKraft.VehicleConfig.addGearMax(builder, gearMax);
  return KartKraft.VehicleConfig.endVehicleConfig(builder);
}

/**
 * @constructor
 */
KartKraft.TrackConfig = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {KartKraft.TrackConfig}
 */
KartKraft.TrackConfig.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.TrackConfig=} obj
 * @returns {KartKraft.TrackConfig}
 */
KartKraft.TrackConfig.getRootAsTrackConfig = function(bb, obj) {
  return (obj || new KartKraft.TrackConfig).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.TrackConfig=} obj
 * @returns {KartKraft.TrackConfig}
 */
KartKraft.TrackConfig.getSizePrefixedRootAsTrackConfig = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new KartKraft.TrackConfig).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
KartKraft.TrackConfig.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
KartKraft.TrackConfig.prototype.numSectors = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
KartKraft.TrackConfig.prototype.trackLengthMetres = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
KartKraft.TrackConfig.prototype.address = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
KartKraft.TrackConfig.prototype.countryCode = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
KartKraft.TrackConfig.startTrackConfig = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
KartKraft.TrackConfig.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numSectors
 */
KartKraft.TrackConfig.addNumSectors = function(builder, numSectors) {
  builder.addFieldInt8(1, numSectors, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} trackLengthMetres
 */
KartKraft.TrackConfig.addTrackLengthMetres = function(builder, trackLengthMetres) {
  builder.addFieldFloat32(2, trackLengthMetres, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} addressOffset
 */
KartKraft.TrackConfig.addAddress = function(builder, addressOffset) {
  builder.addFieldOffset(3, addressOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} countryCodeOffset
 */
KartKraft.TrackConfig.addCountryCode = function(builder, countryCodeOffset) {
  builder.addFieldOffset(4, countryCodeOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
KartKraft.TrackConfig.endTrackConfig = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 * @param {number} numSectors
 * @param {number} trackLengthMetres
 * @param {flatbuffers.Offset} addressOffset
 * @param {flatbuffers.Offset} countryCodeOffset
 * @returns {flatbuffers.Offset}
 */
KartKraft.TrackConfig.createTrackConfig = function(builder, nameOffset, numSectors, trackLengthMetres, addressOffset, countryCodeOffset) {
  KartKraft.TrackConfig.startTrackConfig(builder);
  KartKraft.TrackConfig.addName(builder, nameOffset);
  KartKraft.TrackConfig.addNumSectors(builder, numSectors);
  KartKraft.TrackConfig.addTrackLengthMetres(builder, trackLengthMetres);
  KartKraft.TrackConfig.addAddress(builder, addressOffset);
  KartKraft.TrackConfig.addCountryCode(builder, countryCodeOffset);
  return KartKraft.TrackConfig.endTrackConfig(builder);
}

/**
 * @constructor
 */
KartKraft.SessionConfig = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {KartKraft.SessionConfig}
 */
KartKraft.SessionConfig.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.SessionConfig=} obj
 * @returns {KartKraft.SessionConfig}
 */
KartKraft.SessionConfig.getRootAsSessionConfig = function(bb, obj) {
  return (obj || new KartKraft.SessionConfig).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.SessionConfig=} obj
 * @returns {KartKraft.SessionConfig}
 */
KartKraft.SessionConfig.getSizePrefixedRootAsSessionConfig = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new KartKraft.SessionConfig).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
KartKraft.SessionConfig.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
KartKraft.SessionConfig.prototype.timeLimit = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
KartKraft.SessionConfig.prototype.lapLimit = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
KartKraft.SessionConfig.startSessionConfig = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
KartKraft.SessionConfig.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} timeLimit
 */
KartKraft.SessionConfig.addTimeLimit = function(builder, timeLimit) {
  builder.addFieldInt32(1, timeLimit, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} lapLimit
 */
KartKraft.SessionConfig.addLapLimit = function(builder, lapLimit) {
  builder.addFieldInt32(2, lapLimit, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
KartKraft.SessionConfig.endSessionConfig = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 * @param {number} timeLimit
 * @param {number} lapLimit
 * @returns {flatbuffers.Offset}
 */
KartKraft.SessionConfig.createSessionConfig = function(builder, nameOffset, timeLimit, lapLimit) {
  KartKraft.SessionConfig.startSessionConfig(builder);
  KartKraft.SessionConfig.addName(builder, nameOffset);
  KartKraft.SessionConfig.addTimeLimit(builder, timeLimit);
  KartKraft.SessionConfig.addLapLimit(builder, lapLimit);
  return KartKraft.SessionConfig.endSessionConfig(builder);
}

/**
 * Root object from which all data can be extracted. You must check if motion, dash etc exist before using as not every packet will include all data.
 *
 * @constructor
 */
KartKraft.Frame = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {KartKraft.Frame}
 */
KartKraft.Frame.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.Frame=} obj
 * @returns {KartKraft.Frame}
 */
KartKraft.Frame.getRootAsFrame = function(bb, obj) {
  return (obj || new KartKraft.Frame).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.Frame=} obj
 * @returns {KartKraft.Frame}
 */
KartKraft.Frame.getSizePrefixedRootAsFrame = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new KartKraft.Frame).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {boolean}
 */
KartKraft.Frame.bufferHasIdentifier = function(bb) {
  return bb.__has_identifier('KKFB');
};

/**
 * @returns {number}
 */
KartKraft.Frame.prototype.timestamp = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {KartKraft.Motion=} obj
 * @returns {KartKraft.Motion|null}
 */
KartKraft.Frame.prototype.motion = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new KartKraft.Motion).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {KartKraft.Dashboard=} obj
 * @returns {KartKraft.Dashboard|null}
 */
KartKraft.Frame.prototype.dash = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new KartKraft.Dashboard).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {KartKraft.Session=} obj
 * @returns {KartKraft.Session|null}
 */
KartKraft.Frame.prototype.session = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new KartKraft.Session).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {KartKraft.VehicleConfig=} obj
 * @returns {KartKraft.VehicleConfig|null}
 */
KartKraft.Frame.prototype.vehicleConfig = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new KartKraft.VehicleConfig).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {KartKraft.TrackConfig=} obj
 * @returns {KartKraft.TrackConfig|null}
 */
KartKraft.Frame.prototype.trackConfig = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? (obj || new KartKraft.TrackConfig).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {KartKraft.SessionConfig=} obj
 * @returns {KartKraft.SessionConfig|null}
 */
KartKraft.Frame.prototype.sessionConfig = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? (obj || new KartKraft.SessionConfig).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
KartKraft.Frame.startFrame = function(builder) {
  builder.startObject(7);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} timestamp
 */
KartKraft.Frame.addTimestamp = function(builder, timestamp) {
  builder.addFieldFloat32(0, timestamp, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} motionOffset
 */
KartKraft.Frame.addMotion = function(builder, motionOffset) {
  builder.addFieldOffset(1, motionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dashOffset
 */
KartKraft.Frame.addDash = function(builder, dashOffset) {
  builder.addFieldOffset(2, dashOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} sessionOffset
 */
KartKraft.Frame.addSession = function(builder, sessionOffset) {
  builder.addFieldOffset(3, sessionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} vehicleConfigOffset
 */
KartKraft.Frame.addVehicleConfig = function(builder, vehicleConfigOffset) {
  builder.addFieldOffset(4, vehicleConfigOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} trackConfigOffset
 */
KartKraft.Frame.addTrackConfig = function(builder, trackConfigOffset) {
  builder.addFieldOffset(5, trackConfigOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} sessionConfigOffset
 */
KartKraft.Frame.addSessionConfig = function(builder, sessionConfigOffset) {
  builder.addFieldOffset(6, sessionConfigOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
KartKraft.Frame.endFrame = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
KartKraft.Frame.finishFrameBuffer = function(builder, offset) {
  builder.finish(offset, 'KKFB');
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
KartKraft.Frame.finishSizePrefixedFrameBuffer = function(builder, offset) {
  builder.finish(offset, 'KKFB', true);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} timestamp
 * @param {flatbuffers.Offset} motionOffset
 * @param {flatbuffers.Offset} dashOffset
 * @param {flatbuffers.Offset} sessionOffset
 * @param {flatbuffers.Offset} vehicleConfigOffset
 * @param {flatbuffers.Offset} trackConfigOffset
 * @param {flatbuffers.Offset} sessionConfigOffset
 * @returns {flatbuffers.Offset}
 */
KartKraft.Frame.createFrame = function(builder, timestamp, motionOffset, dashOffset, sessionOffset, vehicleConfigOffset, trackConfigOffset, sessionConfigOffset) {
  KartKraft.Frame.startFrame(builder);
  KartKraft.Frame.addTimestamp(builder, timestamp);
  KartKraft.Frame.addMotion(builder, motionOffset);
  KartKraft.Frame.addDash(builder, dashOffset);
  KartKraft.Frame.addSession(builder, sessionOffset);
  KartKraft.Frame.addVehicleConfig(builder, vehicleConfigOffset);
  KartKraft.Frame.addTrackConfig(builder, trackConfigOffset);
  KartKraft.Frame.addSessionConfig(builder, sessionConfigOffset);
  return KartKraft.Frame.endFrame(builder);
}

// Exports for Node.js and RequireJS
this.KartKraft = KartKraft;
