// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var KartKraft = KartKraft || {};

/**
 * @enum
 */
KartKraft.VehicleState = {
  Unknown: 0,
  Pits: 1,
  Outlap: 2,
  Racing: 3,
  Retired: 4
};

/**
 * Useful generic color struct 
 *
 * @constructor
 */
KartKraft.Color = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {KartKraft.Color}
 */
KartKraft.Color.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
KartKraft.Color.prototype.r = function() {
  return this.bb.readInt8(this.bb_pos);
};

/**
 * @returns {number}
 */
KartKraft.Color.prototype.g = function() {
  return this.bb.readInt8(this.bb_pos + 1);
};

/**
 * @returns {number}
 */
KartKraft.Color.prototype.b = function() {
  return this.bb.readInt8(this.bb_pos + 2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @returns {flatbuffers.Offset}
 */
KartKraft.Color.createColor = function(builder, r, g, b) {
  builder.prep(1, 3);
  builder.writeInt8(b);
  builder.writeInt8(g);
  builder.writeInt8(r);
  return builder.offset();
};

/**
 * Motion data of local player for driving hardware motion simulators
 *
 * @constructor
 */
KartKraft.Motion = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {KartKraft.Motion}
 */
KartKraft.Motion.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.Motion=} obj
 * @returns {KartKraft.Motion}
 */
KartKraft.Motion.getRootAsMotion = function(bb, obj) {
  return (obj || new KartKraft.Motion).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.pitch = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.roll = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.yaw = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.accelerationX = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.accelerationY = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.accelerationZ = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Motion.prototype.traction = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
KartKraft.Motion.startMotion = function(builder) {
  builder.startObject(7);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} pitch
 */
KartKraft.Motion.addPitch = function(builder, pitch) {
  builder.addFieldFloat32(0, pitch, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} roll
 */
KartKraft.Motion.addRoll = function(builder, roll) {
  builder.addFieldFloat32(1, roll, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} yaw
 */
KartKraft.Motion.addYaw = function(builder, yaw) {
  builder.addFieldFloat32(2, yaw, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} accelerationX
 */
KartKraft.Motion.addAccelerationX = function(builder, accelerationX) {
  builder.addFieldFloat32(3, accelerationX, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} accelerationY
 */
KartKraft.Motion.addAccelerationY = function(builder, accelerationY) {
  builder.addFieldFloat32(4, accelerationY, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} accelerationZ
 */
KartKraft.Motion.addAccelerationZ = function(builder, accelerationZ) {
  builder.addFieldFloat32(5, accelerationZ, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} traction
 */
KartKraft.Motion.addTraction = function(builder, traction) {
  builder.addFieldFloat32(6, traction, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
KartKraft.Motion.endMotion = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Dash data for displaying state of current local/followed player
 *
 * @constructor
 */
KartKraft.Dashboard = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {KartKraft.Dashboard}
 */
KartKraft.Dashboard.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.Dashboard=} obj
 * @returns {KartKraft.Dashboard}
 */
KartKraft.Dashboard.getRootAsDashboard = function(bb, obj) {
  return (obj || new KartKraft.Dashboard).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.speed = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.rpm = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.steer = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.throttle = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.brake = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.gear = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.pos = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
KartKraft.Dashboard.prototype.bestLap = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
KartKraft.Dashboard.startDashboard = function(builder) {
  builder.startObject(8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} speed
 */
KartKraft.Dashboard.addSpeed = function(builder, speed) {
  builder.addFieldFloat32(0, speed, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} rpm
 */
KartKraft.Dashboard.addRpm = function(builder, rpm) {
  builder.addFieldFloat32(1, rpm, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} steer
 */
KartKraft.Dashboard.addSteer = function(builder, steer) {
  builder.addFieldFloat32(2, steer, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} throttle
 */
KartKraft.Dashboard.addThrottle = function(builder, throttle) {
  builder.addFieldFloat32(3, throttle, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} brake
 */
KartKraft.Dashboard.addBrake = function(builder, brake) {
  builder.addFieldFloat32(4, brake, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} gear
 */
KartKraft.Dashboard.addGear = function(builder, gear) {
  builder.addFieldInt8(5, gear, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} pos
 */
KartKraft.Dashboard.addPos = function(builder, pos) {
  builder.addFieldInt8(6, pos, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} bestLap
 */
KartKraft.Dashboard.addBestLap = function(builder, bestLap) {
  builder.addFieldFloat32(7, bestLap, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
KartKraft.Dashboard.endDashboard = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Basic vehicle data for live timing. e.g. trackmap
 *
 * @constructor
 */
KartKraft.Vehicle = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {KartKraft.Vehicle}
 */
KartKraft.Vehicle.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.Vehicle=} obj
 * @returns {KartKraft.Vehicle}
 */
KartKraft.Vehicle.getRootAsVehicle = function(bb, obj) {
  return (obj || new KartKraft.Vehicle).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {KartKraft.VehicleState}
 */
KartKraft.Vehicle.prototype.state = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {KartKraft.VehicleState} */ (this.bb.readInt8(this.bb_pos + offset)) : KartKraft.VehicleState.Unknown;
};

/**
 * @returns {number}
 */
KartKraft.Vehicle.prototype.posX = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Vehicle.prototype.posY = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Vehicle.prototype.posZ = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Vehicle.prototype.yaw = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
KartKraft.Vehicle.prototype.sessionPos = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {KartKraft.Color=} obj
 * @returns {KartKraft.Color|null}
 */
KartKraft.Vehicle.prototype.color = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? (obj || new KartKraft.Color).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @returns {number}
 */
KartKraft.Vehicle.prototype.normalisedTrackPos = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
KartKraft.Vehicle.startVehicle = function(builder) {
  builder.startObject(8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {KartKraft.VehicleState} state
 */
KartKraft.Vehicle.addState = function(builder, state) {
  builder.addFieldInt8(0, state, KartKraft.VehicleState.Unknown);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} posX
 */
KartKraft.Vehicle.addPosX = function(builder, posX) {
  builder.addFieldFloat32(1, posX, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} posY
 */
KartKraft.Vehicle.addPosY = function(builder, posY) {
  builder.addFieldFloat32(2, posY, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} posZ
 */
KartKraft.Vehicle.addPosZ = function(builder, posZ) {
  builder.addFieldFloat32(3, posZ, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} yaw
 */
KartKraft.Vehicle.addYaw = function(builder, yaw) {
  builder.addFieldFloat32(4, yaw, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} sessionPos
 */
KartKraft.Vehicle.addSessionPos = function(builder, sessionPos) {
  builder.addFieldInt32(5, sessionPos, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} colorOffset
 */
KartKraft.Vehicle.addColor = function(builder, colorOffset) {
  builder.addFieldStruct(6, colorOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} normalisedTrackPos
 */
KartKraft.Vehicle.addNormalisedTrackPos = function(builder, normalisedTrackPos) {
  builder.addFieldFloat32(7, normalisedTrackPos, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
KartKraft.Vehicle.endVehicle = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Session data
 *
 * @constructor
 */
KartKraft.Session = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {KartKraft.Session}
 */
KartKraft.Session.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.Session=} obj
 * @returns {KartKraft.Session}
 */
KartKraft.Session.getRootAsSession = function(bb, obj) {
  return (obj || new KartKraft.Session).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
KartKraft.Session.prototype.totalTime = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
KartKraft.Session.prototype.timeLeft = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
KartKraft.Session.prototype.totalLaps = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {KartKraft.Vehicle=} obj
 * @returns {KartKraft.Vehicle}
 */
KartKraft.Session.prototype.vehicles = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new KartKraft.Vehicle).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
KartKraft.Session.prototype.vehiclesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
KartKraft.Session.startSession = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} totalTime
 */
KartKraft.Session.addTotalTime = function(builder, totalTime) {
  builder.addFieldInt32(0, totalTime, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} timeLeft
 */
KartKraft.Session.addTimeLeft = function(builder, timeLeft) {
  builder.addFieldInt32(1, timeLeft, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} totalLaps
 */
KartKraft.Session.addTotalLaps = function(builder, totalLaps) {
  builder.addFieldInt32(2, totalLaps, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} vehiclesOffset
 */
KartKraft.Session.addVehicles = function(builder, vehiclesOffset) {
  builder.addFieldOffset(3, vehiclesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
KartKraft.Session.createVehiclesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
KartKraft.Session.startVehiclesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
KartKraft.Session.endSession = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Root object from which all data can be extracted. You must check if motion, dash etc exist before using as not every packet will include all data.
 *
 * @constructor
 */
KartKraft.Frame = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {KartKraft.Frame}
 */
KartKraft.Frame.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {KartKraft.Frame=} obj
 * @returns {KartKraft.Frame}
 */
KartKraft.Frame.getRootAsFrame = function(bb, obj) {
  return (obj || new KartKraft.Frame).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
KartKraft.Frame.prototype.timestamp = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {KartKraft.Motion=} obj
 * @returns {KartKraft.Motion|null}
 */
KartKraft.Frame.prototype.motion = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new KartKraft.Motion).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {KartKraft.Dashboard=} obj
 * @returns {KartKraft.Dashboard|null}
 */
KartKraft.Frame.prototype.dash = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new KartKraft.Dashboard).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {KartKraft.Session=} obj
 * @returns {KartKraft.Session|null}
 */
KartKraft.Frame.prototype.session = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new KartKraft.Session).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
KartKraft.Frame.startFrame = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} timestamp
 */
KartKraft.Frame.addTimestamp = function(builder, timestamp) {
  builder.addFieldFloat32(0, timestamp, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} motionOffset
 */
KartKraft.Frame.addMotion = function(builder, motionOffset) {
  builder.addFieldOffset(1, motionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dashOffset
 */
KartKraft.Frame.addDash = function(builder, dashOffset) {
  builder.addFieldOffset(2, dashOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} sessionOffset
 */
KartKraft.Frame.addSession = function(builder, sessionOffset) {
  builder.addFieldOffset(3, sessionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
KartKraft.Frame.endFrame = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
KartKraft.Frame.finishFrameBuffer = function(builder, offset) {
  builder.finish(offset);
};

// Exports for Node.js and RequireJS
this.KartKraft = KartKraft;
