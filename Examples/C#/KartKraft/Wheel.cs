// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace KartKraft
{

using global::System;
using global::FlatBuffers;

public struct Wheel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Wheel GetRootAsWheel(ByteBuffer _bb) { return GetRootAsWheel(_bb, new Wheel()); }
  public static Wheel GetRootAsWheel(ByteBuffer _bb, Wheel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Wheel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Surface Surface { get { int o = __p.__offset(4); return o != 0 ? (Surface)__p.bb.Get(o + __p.bb_pos) : Surface.None; } }
  public float SlipAngle { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Wheel> CreateWheel(FlatBufferBuilder builder,
      Surface surface = Surface.None,
      float slipAngle = 0.0f) {
    builder.StartObject(2);
    Wheel.AddSlipAngle(builder, slipAngle);
    Wheel.AddSurface(builder, surface);
    return Wheel.EndWheel(builder);
  }

  public static void StartWheel(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddSurface(FlatBufferBuilder builder, Surface surface) { builder.AddByte(0, (byte)surface, 0); }
  public static void AddSlipAngle(FlatBufferBuilder builder, float slipAngle) { builder.AddFloat(1, slipAngle, 0.0f); }
  public static Offset<Wheel> EndWheel(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Wheel>(o);
  }
};


}
