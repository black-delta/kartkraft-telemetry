// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace KartKraft
{

using global::System;
using global::FlatBuffers;

/// Basic vehicle data for live timing. e.g. trackmap
public struct Vehicle : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Vehicle GetRootAsVehicle(ByteBuffer _bb) { return GetRootAsVehicle(_bb, new Vehicle()); }
  public static Vehicle GetRootAsVehicle(ByteBuffer _bb, Vehicle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Vehicle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sbyte Version { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)1; } }
  public VehicleState State { get { int o = __p.__offset(6); return o != 0 ? (VehicleState)__p.bb.GetSbyte(o + __p.bb_pos) : VehicleState.Unknown; } }
  public float PosX { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float PosY { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float PosZ { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Yaw { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int SessionPos { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Color? Color { get { int o = __p.__offset(18); return o != 0 ? (Color?)(new Color()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float NormalisedTrackPos { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static void StartVehicle(FlatBufferBuilder builder) { builder.StartObject(9); }
  public static void AddVersion(FlatBufferBuilder builder, sbyte version) { builder.AddSbyte(0, version, 1); }
  public static void AddState(FlatBufferBuilder builder, VehicleState state) { builder.AddSbyte(1, (sbyte)state, 0); }
  public static void AddPosX(FlatBufferBuilder builder, float posX) { builder.AddFloat(2, posX, 0.0f); }
  public static void AddPosY(FlatBufferBuilder builder, float posY) { builder.AddFloat(3, posY, 0.0f); }
  public static void AddPosZ(FlatBufferBuilder builder, float posZ) { builder.AddFloat(4, posZ, 0.0f); }
  public static void AddYaw(FlatBufferBuilder builder, float yaw) { builder.AddFloat(5, yaw, 0.0f); }
  public static void AddSessionPos(FlatBufferBuilder builder, int sessionPos) { builder.AddInt(6, sessionPos, 0); }
  public static void AddColor(FlatBufferBuilder builder, Offset<Color> colorOffset) { builder.AddStruct(7, colorOffset.Value, 0); }
  public static void AddNormalisedTrackPos(FlatBufferBuilder builder, float normalisedTrackPos) { builder.AddFloat(8, normalisedTrackPos, 0.0f); }
  public static Offset<Vehicle> EndVehicle(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Vehicle>(o);
  }
};


}
