# automatically generated by the FlatBuffers compiler, do not modify

# namespace: KartKraft

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SessionConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSessionConfig(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SessionConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def SessionConfigBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4B\x4B\x46\x42", size_prefixed=size_prefixed)

    # SessionConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SessionConfig
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SessionConfig
    def TimeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SessionConfig
    def LapLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def SessionConfigStart(builder): builder.StartObject(3)
def SessionConfigAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def SessionConfigAddTimeLimit(builder, timeLimit): builder.PrependUint32Slot(1, timeLimit, 0)
def SessionConfigAddLapLimit(builder, lapLimit): builder.PrependUint32Slot(2, lapLimit, 0)
def SessionConfigEnd(builder): return builder.EndObject()
