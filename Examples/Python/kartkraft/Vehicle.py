# automatically generated by the FlatBuffers compiler, do not modify

# namespace: KartKraft

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Basic vehicle data for live timing. e.g. trackmap
class Vehicle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsVehicle(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vehicle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def VehicleBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4B\x4B\x46\x42", size_prefixed=size_prefixed)

    # Vehicle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vehicle
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Vehicle
    def PosX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vehicle
    def PosY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vehicle
    def PosZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vehicle
    def Yaw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vehicle
    def SessionPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Vehicle
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = o + self._tab.Pos
            from KartKraft.Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Vehicle
    def NormalisedTrackPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def VehicleStart(builder): builder.StartObject(8)
def VehicleAddState(builder, state): builder.PrependUint8Slot(0, state, 0)
def VehicleAddPosX(builder, posX): builder.PrependFloat32Slot(1, posX, 0.0)
def VehicleAddPosY(builder, posY): builder.PrependFloat32Slot(2, posY, 0.0)
def VehicleAddPosZ(builder, posZ): builder.PrependFloat32Slot(3, posZ, 0.0)
def VehicleAddYaw(builder, yaw): builder.PrependFloat32Slot(4, yaw, 0.0)
def VehicleAddSessionPos(builder, sessionPos): builder.PrependInt32Slot(5, sessionPos, 0)
def VehicleAddColor(builder, color): builder.PrependStructSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)
def VehicleAddNormalisedTrackPos(builder, normalisedTrackPos): builder.PrependFloat32Slot(7, normalisedTrackPos, 0.0)
def VehicleEnd(builder): return builder.EndObject()
