// automatically generated by the FlatBuffers compiler, do not modify

package KartKraft;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * Motion data of local player for driving hardware motion simulators
 */
public final class Motion extends Table {
  public static Motion getRootAsMotion(ByteBuffer _bb) { return getRootAsMotion(_bb, new Motion()); }
  public static Motion getRootAsMotion(ByteBuffer _bb, Motion obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Motion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float pitch() { int o = __offset(4); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float roll() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float yaw() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float accelerationX() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float accelerationY() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float accelerationZ() { int o = __offset(14); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float tractionLoss() { int o = __offset(16); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float velocityX() { int o = __offset(18); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float velocityY() { int o = __offset(20); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float velocityZ() { int o = __offset(22); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float angularVelocityX() { int o = __offset(24); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float angularVelocityY() { int o = __offset(26); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float angularVelocityZ() { int o = __offset(28); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public Wheel wheels(int j) { return wheels(new Wheel(), j); }
  public Wheel wheels(Wheel obj, int j) { int o = __offset(30); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int wheelsLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public float worldVelocityX() { int o = __offset(32); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float worldVelocityY() { int o = __offset(34); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float worldVelocityZ() { int o = __offset(36); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createMotion(FlatBufferBuilder builder,
      float pitch,
      float roll,
      float yaw,
      float accelerationX,
      float accelerationY,
      float accelerationZ,
      float tractionLoss,
      float velocityX,
      float velocityY,
      float velocityZ,
      float angularVelocityX,
      float angularVelocityY,
      float angularVelocityZ,
      int wheelsOffset,
      float worldVelocityX,
      float worldVelocityY,
      float worldVelocityZ) {
    builder.startObject(17);
    Motion.addWorldVelocityZ(builder, worldVelocityZ);
    Motion.addWorldVelocityY(builder, worldVelocityY);
    Motion.addWorldVelocityX(builder, worldVelocityX);
    Motion.addWheels(builder, wheelsOffset);
    Motion.addAngularVelocityZ(builder, angularVelocityZ);
    Motion.addAngularVelocityY(builder, angularVelocityY);
    Motion.addAngularVelocityX(builder, angularVelocityX);
    Motion.addVelocityZ(builder, velocityZ);
    Motion.addVelocityY(builder, velocityY);
    Motion.addVelocityX(builder, velocityX);
    Motion.addTractionLoss(builder, tractionLoss);
    Motion.addAccelerationZ(builder, accelerationZ);
    Motion.addAccelerationY(builder, accelerationY);
    Motion.addAccelerationX(builder, accelerationX);
    Motion.addYaw(builder, yaw);
    Motion.addRoll(builder, roll);
    Motion.addPitch(builder, pitch);
    return Motion.endMotion(builder);
  }

  public static void startMotion(FlatBufferBuilder builder) { builder.startObject(17); }
  public static void addPitch(FlatBufferBuilder builder, float pitch) { builder.addFloat(0, pitch, 0.0f); }
  public static void addRoll(FlatBufferBuilder builder, float roll) { builder.addFloat(1, roll, 0.0f); }
  public static void addYaw(FlatBufferBuilder builder, float yaw) { builder.addFloat(2, yaw, 0.0f); }
  public static void addAccelerationX(FlatBufferBuilder builder, float accelerationX) { builder.addFloat(3, accelerationX, 0.0f); }
  public static void addAccelerationY(FlatBufferBuilder builder, float accelerationY) { builder.addFloat(4, accelerationY, 0.0f); }
  public static void addAccelerationZ(FlatBufferBuilder builder, float accelerationZ) { builder.addFloat(5, accelerationZ, 0.0f); }
  public static void addTractionLoss(FlatBufferBuilder builder, float tractionLoss) { builder.addFloat(6, tractionLoss, 0.0f); }
  public static void addVelocityX(FlatBufferBuilder builder, float velocityX) { builder.addFloat(7, velocityX, 0.0f); }
  public static void addVelocityY(FlatBufferBuilder builder, float velocityY) { builder.addFloat(8, velocityY, 0.0f); }
  public static void addVelocityZ(FlatBufferBuilder builder, float velocityZ) { builder.addFloat(9, velocityZ, 0.0f); }
  public static void addAngularVelocityX(FlatBufferBuilder builder, float angularVelocityX) { builder.addFloat(10, angularVelocityX, 0.0f); }
  public static void addAngularVelocityY(FlatBufferBuilder builder, float angularVelocityY) { builder.addFloat(11, angularVelocityY, 0.0f); }
  public static void addAngularVelocityZ(FlatBufferBuilder builder, float angularVelocityZ) { builder.addFloat(12, angularVelocityZ, 0.0f); }
  public static void addWheels(FlatBufferBuilder builder, int wheelsOffset) { builder.addOffset(13, wheelsOffset, 0); }
  public static int createWheelsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startWheelsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addWorldVelocityX(FlatBufferBuilder builder, float worldVelocityX) { builder.addFloat(14, worldVelocityX, 0.0f); }
  public static void addWorldVelocityY(FlatBufferBuilder builder, float worldVelocityY) { builder.addFloat(15, worldVelocityY, 0.0f); }
  public static void addWorldVelocityZ(FlatBufferBuilder builder, float worldVelocityZ) { builder.addFloat(16, worldVelocityZ, 0.0f); }
  public static int endMotion(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

