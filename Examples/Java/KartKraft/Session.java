// automatically generated by the FlatBuffers compiler, do not modify

package KartKraft;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * Session data
 */
public final class Session extends Table {
  public static Session getRootAsSession(ByteBuffer _bb) { return getRootAsSession(_bb, new Session()); }
  public static Session getRootAsSession(ByteBuffer _bb, Session obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Session __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int totalTime() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int timeLeft() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int totalLaps() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public Vehicle vehicles(int j) { return vehicles(new Vehicle(), j); }
  public Vehicle vehicles(Vehicle obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int vehiclesLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }

  public static int createSession(FlatBufferBuilder builder,
      int totalTime,
      int timeLeft,
      int totalLaps,
      int vehiclesOffset) {
    builder.startObject(4);
    Session.addVehicles(builder, vehiclesOffset);
    Session.addTotalLaps(builder, totalLaps);
    Session.addTimeLeft(builder, timeLeft);
    Session.addTotalTime(builder, totalTime);
    return Session.endSession(builder);
  }

  public static void startSession(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addTotalTime(FlatBufferBuilder builder, int totalTime) { builder.addInt(0, totalTime, 0); }
  public static void addTimeLeft(FlatBufferBuilder builder, int timeLeft) { builder.addInt(1, timeLeft, 0); }
  public static void addTotalLaps(FlatBufferBuilder builder, int totalLaps) { builder.addInt(2, totalLaps, 0); }
  public static void addVehicles(FlatBufferBuilder builder, int vehiclesOffset) { builder.addOffset(3, vehiclesOffset, 0); }
  public static int createVehiclesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startVehiclesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endSession(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

