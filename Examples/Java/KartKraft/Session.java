// automatically generated by the FlatBuffers compiler, do not modify

package KartKraft;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * Session data
 */
public final class Session extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static Session getRootAsSession(ByteBuffer _bb) { return getRootAsSession(_bb, new Session()); }
  public static Session getRootAsSession(ByteBuffer _bb, Session obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Session __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public KartKraft.Vehicle vehicles(int j) { return vehicles(new KartKraft.Vehicle(), j); }
  public KartKraft.Vehicle vehicles(KartKraft.Vehicle obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int vehiclesLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public KartKraft.Vehicle.Vector vehiclesVector() { return vehiclesVector(new KartKraft.Vehicle.Vector()); }
  public KartKraft.Vehicle.Vector vehiclesVector(KartKraft.Vehicle.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public float timeElapsed() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createSession(FlatBufferBuilder builder,
      int vehiclesOffset,
      float timeElapsed) {
    builder.startTable(5);
    Session.addTimeElapsed(builder, timeElapsed);
    Session.addVehicles(builder, vehiclesOffset);
    return Session.endSession(builder);
  }

  public static void startSession(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addVehicles(FlatBufferBuilder builder, int vehiclesOffset) { builder.addOffset(3, vehiclesOffset, 0); }
  public static int createVehiclesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startVehiclesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTimeElapsed(FlatBufferBuilder builder, float timeElapsed) { builder.addFloat(4, timeElapsed, 0.0f); }
  public static int endSession(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Session get(int j) { return get(new Session(), j); }
    public Session get(Session obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

